#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/mman.h>

#include "smalloc.h"
#include "testhelpers.h"

#define SIZE 1024


/* Simple test for smalloc and sfree. */

int main(void) {

  mem_init(SIZE);
    
  char *ptrs[1024];
  int i;

  /* Call smalloc 4 times */
    
  for(i = 0; i < 1024; i++) {
    int num_bytes = 1;
    
    if ((ptrs[i] = smalloc(num_bytes)) == NULL) {
      printf ("smalloc fail\n");
      exit (1);
    }
    write_to_mem(num_bytes, ptrs[i], 14);
  }
    
  printf("List of allocated blocks:\n");
  print_allocated();
  printf("List of free blocks:\n");
  print_free();
  printf("Contents of allocated memory:\n");
  print_mem();

  printf("Freeing %p result = %d\n", ptrs[1], sfree(ptrs[4]));

  sfree (ptrs[50]);

  sfree (ptrs[100]);
  
  for(i = 0; i < 1024; i++) {
    printf ("Freeing %p, ptr %d\n", ptrs[i], i);
    
    if (sfree(ptrs[i]) == -1) {
      printf ("Unable to free ptr %d\n\n", i);
    }
  }
  //sfree (ptrs[0]);
  //sfree (ptrs[1]);
  //sfree (ptrs[3]);
  //sfree (ptrs[2]);
  printf ("\n");

  for(i = 0; i < 1024; i++) {
    int num_bytes = 1;
    
    if ((ptrs[i] = smalloc(num_bytes)) == NULL) {
      printf ("smalloc fail\n");
      exit (1);
    }
    write_to_mem(num_bytes, ptrs[i], 14);
  }
  
  for(i = 0; i < 1024; i++) {
    printf ("Freeing %p, ptr %d\n", ptrs[i], i);
    
    if (sfree(ptrs[i]) == -1) {
      printf ("Unable to free ptr %d\n\n", i);
    }
  }
        
  printf("List of allocated blocks:\n");
  print_allocated();
  printf("List of free blocks:\n");
  print_free();
  printf("Contents of allocated memory:\n");
  print_mem();

  printf ("Clear memory\n");
  mem_clean();
  return 0;
}
