#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/mman.h>
#include "smalloc.h"


#define SIZE 4096 * 64

extern mmapBlock *mem;
extern Block *freelist;
extern Block *allocated_list;

/* Simple test for smalloc and sfree. */

int main(void) {

  mem_init(SIZE);
  
  /*  printf ("address mem pointer: %p\n", mem);
  printf ("mem address of the block: %p\n", mem->addr);
  printf ("mem size: %d\n\n", mem->size);
  */
  
  printf ("freelist address: %p\n", &freelist);
  printf ("freelist pointer address: %p\n", freelist);
  printf ("freelist first address: %p\n", freelist->addr);
  printf ("freelist size: %d\n", freelist->size);
  printf ("freelist next address: %p\n", freelist->next);
  printf ("address of freelist next: %p\n\n", &freelist->next);

  /*printf ("allocated list first address: %p\n", allocated_list->addr);
  printf ("allocated list size: %d\n", allocated_list->size);
  printf ("allocated list next address: %p\n\n", allocated_list->next);
  */
  
  printf ("address mem pointer: %p\n", mem);
  printf ("mem address of the block: %p\n", mem->addr);
  printf ("mem size: %d\n\n", mem->size);

  int *a, *b;
  
  //int i;
  //for (i = 0; i < 20; i ++)
  a = smalloc (sizeof (int));
  
  printf ("a address %p\n", a);
  
  //printf ("b address %p\n", b = smalloc (sizeof (int)));

  *a = 10;

  printf ("%d\n", *a);
  
  mem_clean();
  
  /*printf ("address mem pointer: %p\n", mem);
  printf ("mem address of the block: %p\n", mem->addr);
  printf ("mem size: %d\n", mem->size);*/
  
  return 0;
}
